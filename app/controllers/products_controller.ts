// app/controllers/products_controller.ts
import type { HttpContext } from '@adonisjs/core/http'

import Product from '#models/product'
import { createProductValidator } from '#validators/product'

export default class ProductsController {
// (Havia um 'S' solto aqui, eu removi)
Â  /**
Â  Â * (GET /products)
Â  Â * Lista todos os produtos.
Â  Â */
Â  public async index({ view }: HttpContext) {
Â  Â  // 1. Busca TODOS os produtos no banco de dados
Â  Â  const products = await Product.all() 
Â  Â  
  console.log('ðŸ“¦ Produtos encontrados:', products.length)
  console.log('ðŸ“¦ Dados:', JSON.stringify(products, null, 2))
Â  Â  // 2. (MUDANÃ‡A "NUCLEAR")
Â  Â  // Â  Â Vamos renderizar um ARQUIVO NOVO para enganar o cache.
Â  Â  return view.render('pages/products/lista_final', { products })
Â  }
Â  
Â  /**
Â  Â * (GET /products/create)
Â  Â * Mostra o formulÃ¡rio de criaÃ§Ã£o
Â  *
Â  Â */
Â  public async create({ view }: HttpContext) {
Â  Â  // Apenas renderiza a view
Â  Â  return view.render('pages/products/create')
Â  }

Â  /**
Â  Â * (POST /products)
Â  Â * Recebe os dados, valida e salva no banco
Â  Â */
Â  public async store({ request, response, session }: HttpContext) {
Â  Â  
Â  Â  // 1. Validar os dados. Se falhar, ele joga um erro.
Â  Â  const payload = await request.validateUsing(createProductValidator)

Â  Â  // 2. Se a validaÃ§Ã£o passar, criar o produto
Â  Â  const product = await Product.create(payload)

Â  Â  // 3. Salvar uma mensagem de sucesso na sessÃ£o
Â  Â  session.flash('success', `Produto "${product.name}" criado com sucesso!`)

Â  Â  // 4. Redirecionar para a pÃ¡gina de detalhes do produto
Â  Â  return response.redirect().toRoute('products.show', { id: product.id })
Â  }

Â  /**
Â  Â * (GET /products/:id)
Â  Â * Mostra a pÃ¡gina de "Detalhar Produto".
Â  Â */
Â  public async show({ params, view }: HttpContext) {
Â  Â  const product = await Product.findOrFail(params.id)
Â  Â  return view.render('pages/products/show', { product })
Â  }

}